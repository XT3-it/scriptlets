#!/bin/sh
#
# ============================== SUMMARY =====================================
#
# Program : zpoolmac
# Version : 0.1
# Date    : January 26 2016
# Author  : Dirk Doerflinger - dirk(at)doerflinger(dot)org
# Summary : This is a local check for check_mk to check zfs pools on mac
#
# Licence : MIT 
#
# =========================== PROGRAM LICENSE =================================
#
# Copyright (C) 2016 Dirk Doerflinger
#
# Permission is hereby granted, free of charge, to any person obtaining a copy 
# of this software and associated documentation files (the "Software"), to deal 
# in the Software without restriction, including without limitation the rights 
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell 
# copies of the Software, and to permit persons to whom the Software is 
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in 
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, 
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE 
# SOFTWARE.
#
# ===================== INFORMATION ABOUT THIS PLUGIN =========================
#
# This local chekc for check_mk uses the zpool command to check the health of 
# a zpool on OS X (tested on El Capitan using OpenZFS on OS X). 
# It also provides performance data. 
#
# This program is written and maintained by:
#   Dirk Doerflinger - dirk(at)doerflinger(dot)org
#
# ============================= SETUP NOTES ====================================
#
# Set up check_mk_agent on OS X. I put the agent in /usr/local/bin and adjust 
# its path settings like this:
#
# export MK_LIBDIR="/usr/local/lib/check_mk_agent"
# export MK_CONFDIR="/etc/check_mk"
# export MK_VARDIR="/var/lib/check_mk_agent"
#
# Also set up either xinetd or a LaunchDaemon and test from your monitor host
#
# Copy the file to /usr/local/lib/check_mk_agent/local
# Make sure it is executable 
#
# In order to test do the following steps:
#
# 1.) On your mac run 
# $> /usr/local/lib/check_mk_agent/local/zpoolmac
# 
# The result should be something like 
# 0 zpool_Pool2 size=7645041786|free=7645041786|usedpercent=0;95;98 online
#
# 2.) Also on your mac run
# $> /usr/local/bin/check_mk_agent
#
# If you search for <<<local>>> in the output, the same lines as above should
# appear.
#
# 3.) Test on the monitor host:
# First reinventarize the host
# $> check_mk -I machost 
# Then run a manual check:
# $> check_mk -d machost
#
# The same lines should appear unter <<<local>>>
#
# ================================ REVISION ==================================
#
# 0.1 Initial release
#
# ============================================================================

PATH="/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/bin"
# check if we have the necessary binaries, otherwise return 3, UNKNOWN 
if [ -x "/usr/local/bin/zpool" ]
then
# Create a list of all pools
 DEVICES="$(zpool list -H -o name)"
else
 echo "3 $DEVICESTRING zpool executable not found"
fi
unset ERRORSTRING
unset OKSTRING
unset ERR

# Iterate over all pools
for DEVICE in ${DEVICES}
do
# Get the health status of the pool
 HEALTHSTRING="$(zpool list -H -o health ${DEVICE})"
# Normalize Size, Allocation and Free values
 SIZESTRING="$(zpool list  -H -o size ${DEVICE})"
 SIZEUNIT="${SIZESTRING: -1}"
 S=${SIZESTRING%?}
 case $SIZEUNIT in 
     K)
	 FREE=$(echo "$F * 1024" | bc -l)
     ;;
     M)
	 SIZE=$(echo "$S * 1024 * 1024" | bc -l)
     ;;
     G)
	 SIZE=$(echo "$S * 1024 * 1024 * 1024" | bc -l)
     ;;
     T)
	 SIZE=$(echo "$S * 1024 * 1024 * 1024 * 1024" | bc -l)
     ;;
 esac
 FREESTRING="$(zpool list  -H -o free ${DEVICE})"
 FREEUNIT="${FREESTRING: -1}"
 F=${FREESTRING%?}
 case $FREEUNIT in 
     K)
	 FREE=$(echo "$F * 1024" | bc -l)
     ;;
     M)
	 FREE=$(echo "$F * 1024 * 1024" | bc -l)
     ;;
     G)
	 FREE=$(echo "$F * 1024 * 1024 * 1024" | bc -l)
     ;;
     T)
	 FREE=$(echo "$F * 1024 * 1024 * 1024 * 1024" | bc -l)
     ;;
 esac
 ALLOCSTRING="$(zpool list -H -o alloc ${DEVICE})"
 ALLOCUNIT="${ALLOCSTRING: -1}"
 A=${ALLOCSTRING%?}
 case $ALLOCUNIT in 
     K)
	 ALLOC=$(echo "$A * 1024" | bc -l)
     ;;
     M)
	 ALLOC=$(echo "$A * 1024 * 1024" | bc -l)
     ;;
     G)
	 ALLOC=$(echo "$A * 1024 * 1024 * 1024" | bc -l)
     ;;
     T)
	 ALLOC=$(echo "$A * 1024 * 1024 * 1024 * 1024" | bc -l)
     ;;
 esac
# Calculate percentage of used space
 USEDPERCENTAGE=$(echo "scale=1;(($ALLOC / $SIZE)*100)/1" | bc -l)
# Create a String with the device indicator (zpool_), the Pool name and usage data
 DEVICESTRING="zpool_$DEVICE size=$SIZE|free=$FREE|usedpercent=$USEDPERCENTAGE;95;98"
# Check the health status and react. You could also eg. send a mail on error etc.
 if [ "$(echo ${HEALTHSTRING}|tr [:upper:] [:lower:]|sed -Ee 's/.*(degraded|faulted|offline|online|removed|unavail).*/\1/')" = "" ]
 then
     echo "3 $DEVICESTRING unknown state"
 else
  case $(echo ${HEALTHSTRING}|tr [:upper:] [:lower:]|sed -Ee 's/.*(degraded|faulted|offline|online|removed|unavail).*/\1/') in
   degraded)
      echo "2 $DEVICESTRING degraded"
    ;;
   faulted)
      echo "2 $DEVICESTRING faulted"
    ;;
   offline)
      echo "2 $DEVICESTRING offline"
    ;;
   removed)
      echo "2 $DEVICESTRING removed"
    ;;
   unavail)
      echo "2 $DEVICESTRING unavail"
    ;;
   online)
      echo "0 $DEVICESTRING online"
    ;;
   esac
 fi
 unset SIZE
 unset SIZEUNIT
 unset SIZESTRING
 unset S
 unset FREE
 unset FREEUNIT
 unset FREESTRING
 unset F
 unset ALLOC
 unset ALLOCUNIT
 unset ALLOCSTRING
 unset A
done
exit 0
